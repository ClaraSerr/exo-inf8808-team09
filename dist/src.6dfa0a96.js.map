{"version":3,"sources":["scripts/helper.js","scripts/preprocess.js","scripts/grouped-quantile.js","index.js"],"names":["generateMapG","width","height","d3","select","append","attr","generateMarkerG","setCanvasSize","appendGraphLabels","g","initPanelDiv","style","getSimulation","data","forceSimulation","features","alphaDecay","velocityDecay","force","forceCollide","strength","simulate","simulation","on","selectAll","d","x","y","getProjection","geoMercator","center","scale","getPath","projection","geoPath","getClosestStep","nSteps","domain","BEST_STEPS","step","stepDiff","bestStep","length","i","push","Math","abs","getSteps","steps","firstStep","floor","unshift","getQuantiles","array","quantiles","sort","ascending","quantile","median","addDayType","jour_semaine","date","getDay","type_jour","isNaN","voyage","ferie","aggregateData","csvData","vizData","startDate","endDate","typeJour","ligne","girouettes","posLigne","findIndex","e","posGirouette","girouette","Girouette","voyages","posVoyage","arrets","posArret","codeArret","arret_code","nomArret","arret_nom","sequenceArret","sequence_arret","minutesEcart","moyMinutesEcart","nClients","moyNClients","ponctualite","tauxPonctualite","minutesEcartClient","moyMinutesEcartClient","Minutes_ecart_planifie","montants","Etat_Ponctualite","average","arr","reduce","a","b","toFixed","forEach","arret","filter","MARGIN","top","right","bottom","left","FONT_SIZE","DIRECTIONS_ANGLE","QUANTILE_STROKE_COLOR","QUANTILE_FILL_COLOR","QUANTILE_STROKE_WIDTH","NUMBER_OF_TICKS","GRADIENT_COLORS","GRADIENT_THRESHOLDS","generateViz3","container","delayGraphContainer","trafficGraphContainer","ResizeObserver","generateDelayGraph","observe","node","generateTrafficGraph","quantileSets","getDelayQuantileSets","title","generateGroupedQuantileGraph","svg","dataScale","HEIGHT","getBoundingClientRect","WIDTH","min","enter","insert","text","legend","middleY","squareWidth","paddingX","paddingY","getTrafficQuantileSets","html","BAR_WIDTH","linesScale","scaleOrdinal","lines","range","directionsRange","line","directionsScale","directions","maxValue","Number","MIN_SAFE_INTEGER","minValue","MAX_SAFE_INTEGER","scaleLinear","xAxis","lineValuesY","directionValuesY","yAxis","helper","bars","q3","q2","q1","j","round","direction","delays","trip","stop","tripNClients","svgSize","Date","csv","then","arret_Latitude","arret_Longitude","preprocess","groupedQuantile"],"mappings":"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","file":"src.6dfa0a96.js","sourceRoot":"..\\src","sourcesContent":["\r\n/**\r\n * Generates the SVG element g which will contain the map base.\r\n *\r\n * @param {number} width The width of the graph\r\n * @param {number} height The height of the graph\r\n * @returns {*} The d3 Selection for the created g element\r\n */\r\nexport function generateMapG (width, height) {\r\n  return d3.select('.graph')\r\n    .select('svg')\r\n    .append('g')\r\n    .attr('id', 'map-g')\r\n    .attr('width', width)\r\n    .attr('height', height)\r\n}\r\n\r\n/**\r\n * Generates the SVG element g which will contain the map markers.\r\n *\r\n * @param {number} width The width of the graph\r\n * @param {number} height The height of the graph\r\n * @returns {*} The d3 Selection for the created g element\r\n */\r\nexport function generateMarkerG (width, height) {\r\n  return d3.select('.graph')\r\n    .select('svg')\r\n    .append('g')\r\n    .attr('id', 'marker-g')\r\n    .attr('width', width)\r\n    .attr('height', height)\r\n}\r\n\r\n/**\r\n * Sets the size of the SVG canvas containing the graph.\r\n *\r\n * @param {number} width The desired width\r\n * @param {number} height The desired height\r\n */\r\nexport function setCanvasSize (width, height) {\r\n  d3.select('#map').select('svg')\r\n    .attr('width', width)\r\n    .attr('height', height)\r\n}\r\n\r\n/**\r\n * Appends the labels for the graph.\r\n *\r\n * @param {*} g The d3 Selection of the graph's g SVG element\r\n */\r\nexport function appendGraphLabels (g) {\r\n /* g.append('text')\r\n    .text('Achalandage et ponctualité des lignes de bus 9 et 22 de la couronne Nord de Montréal')\r\n    .attr('class', 'title')\r\n    .attr('fill', '#000000')\r\n    .attr('font-family', 'myriad-pro')\r\n    .attr('font-size', 28)\r\n    .attr('transform', 'translate(50, 50)')\r\n\r\n  g.append('text')\r\n    .text('Sous-titre')\r\n    .attr('class', 'title')\r\n    .attr('fill', '#000000')\r\n    .attr('font-family', 'myriad-pro')\r\n    .attr('font-size', 18)\r\n    .attr('transform', 'translate(50, 85)') */\r\n}\r\n\r\n/**\r\n * Initializes the div which will contain the information panel.\r\n */\r\nexport function initPanelDiv () {\r\n  d3.select('.graph')\r\n    .append('div')\r\n    .attr('id', 'panel')\r\n    .style('width', '215px')\r\n    .style('border', '1px solid black')\r\n    .style('padding', '10px')\r\n    .style('visibility', 'hidden')\r\n}\r\n\r\n/**\r\n * Initializes the simulation used to place the circles\r\n *\r\n * @param {object} data The data to be displayed\r\n * @returns {*} The generated simulation\r\n */\r\nexport function getSimulation (data) {\r\n  return d3.forceSimulation(data.features)\r\n    .alphaDecay(0)\r\n    .velocityDecay(0.75)\r\n    .force('collision',\r\n      d3.forceCollide(5)\r\n        .strength(1)\r\n    )\r\n}\r\n\r\n/**\r\n * Update the (x, y) position of the circles'\r\n * centers on each tick of the simulation.\r\n *\r\n * @param {*} simulation The simulation used to position the cirles.\r\n */\r\nexport function simulate (simulation) {\r\n  simulation.on('tick', () => {\r\n    d3.selectAll('.marker')\r\n      .attr('cx', (d) => d.x)\r\n      .attr('cy', (d) => d.y)\r\n  })\r\n}\r\n\r\n/**\r\n * Sets up the projection to be used.\r\n *\r\n * @returns {*} The projection to use to trace the map elements\r\n */\r\nexport function getProjection () {\r\n  return d3.geoMercator()\r\n    .center([-73.708879, 45.579611])\r\n    .scale(70000)\r\n}\r\n\r\n/**\r\n * Sets up the path to be used.\r\n *\r\n * @param {*} projection The projection used to trace the map elements\r\n * @returns {*} The path to use to trace the map elements\r\n */\r\nexport function getPath (projection) {\r\n  return d3.geoPath()\r\n    .projection(projection)\r\n}\r\n\r\n/**\r\n * @param {number} nSteps The ideal number of steps\r\n * @param {*} domain Domain of d3 scale\r\n * @returns {number} The best step to use\r\n */\r\nexport function getClosestStep (nSteps, domain) {\r\n  const BEST_STEPS = [\r\n    0.1, 0.2, 0.25, 0.5,\r\n    1, 2, 2.5, 5,\r\n    10, 20, 25, 50,\r\n    100, 200, 250, 500,\r\n    1000, 2000, 2500, 5000,\r\n    10000, 20000, 25000, 50000\r\n  ]\r\n  var step = (domain[1] - domain[0]) / nSteps\r\n  var stepDiff = []\r\n  var bestStep = BEST_STEPS[BEST_STEPS.length - 1]\r\n  for (let i = 0; i < BEST_STEPS.length; i++) {\r\n    stepDiff.push(Math.abs(BEST_STEPS[i] - step))\r\n    if (i > 0 && stepDiff[i] > stepDiff[i - 1]) {\r\n      bestStep = BEST_STEPS[i - 1]\r\n      break\r\n    }\r\n  }\r\n  return bestStep\r\n}\r\n\r\n/**\r\n * @param {number} nSteps The ideal number of steps\r\n * @param {*} domain Domain of d3 scale\r\n * @returns {Array<number>} The best steps\r\n */\r\nexport function getSteps (nSteps, domain) {\r\n  var step = getClosestStep(nSteps, domain)\r\n  var steps = []\r\n  if (domain[0] <= 0 && domain[1] >= 0) {\r\n    steps.push(0)\r\n  } else {\r\n    let firstStep = Math.floor(domain[0])\r\n    while (firstStep % step !== 0) {\r\n      firstStep += 1\r\n    }\r\n    steps.push(firstStep)\r\n  }\r\n  while (steps[steps.length - 1] < domain[1] - step) {\r\n    steps.push(steps[steps.length - 1] + step)\r\n  }\r\n  while (steps[0] > domain[0] + step) {\r\n    steps.unshift(steps[0] - step)\r\n  }\r\n  return steps\r\n}\r\n\r\n/**\r\n * @param {Array<number>} array Array of numeric values\r\n * @returns {Array<number>} The quantiles\r\n */\r\nexport function getQuantiles (array) {\r\n  array = array.sort(d3.ascending)\r\n  const quantiles = [\r\n    array[0],\r\n    d3.quantile(array, 0.25),\r\n    d3.median(array),\r\n    d3.quantile(array, 0.75),\r\n    array[array.length - 1]\r\n  ]\r\n  return quantiles\r\n}\r\n","// INF8808 - Exo\r\n//\r\n// Adam Prévost - 1947205\r\n// Armelle Jézéquel - 2098157\r\n// Clara Serruau - 2164678\r\n// Jules Lefebvre - 1847158\r\n// Julien Dupuis - 1960997\r\n//\r\n\r\n/**\r\n * Ajout de champs à l'objet\r\n * jour_semaine {0, 1, 2, 3, 4, 5, 6} où 0 = Dimanche\r\n * type_jour {semaine, fin de semaine}\r\n * ferie {true, false}\r\n *\r\n * @param {object[]} data L'array d'objets qui contient les lignes du csv\r\n */\r\n export function addDayType (data) {\r\n  for (var i = 0; i < data.length; i++) {\r\n    // jour_semaine\r\n    data[i].jour_semaine = data[i].date.getDay()\r\n\r\n    // type_jour\r\n    data[i].jour_semaine === (0 || 6) ? data[i].type_jour = 'fin de semaine' : data[i].type_jour = 'semaine'\r\n\r\n    // ferie\r\n    isNaN(data[i].voyage) ? data[i].ferie = true : data[i].ferie = false\r\n  }\r\n}\r\n/**\r\n * aggregateData() remplit l'objet vizData à partir des données du csv (data)\r\n *\r\n * @param {*} csvData L'array d'objets qui contient les lignes du csv, modifié par preprocess.addDayType()\r\n * @param {*} vizData L'array d'objets qui contient les données consolidées requises pour générer les viz\r\n * @param {*} startDate Date de début\r\n * @param {*} endDate Date de fin\r\n * @param {*} typeJour On considère semaine ou weekend\r\n * @param {*} ferie On considère les fériés si true\r\n */\r\nexport function aggregateData (csvData, vizData, startDate, endDate, typeJour, ferie) {\r\n  // Boucle sur les lignes de csvData pour remplir la structure vizData\r\n  for (var i = 0; i < csvData.length; i++) {\r\n    if (csvData[i].date >= startDate && csvData[i].date <= endDate && csvData[i].type_jour === typeJour && csvData[i].ferie === ferie) {\r\n      if (vizData.length === 0) {\r\n        vizData.push({ ligne: csvData[i].ligne, girouettes: [] })\r\n      }\r\n\r\n      // On ajoute la ligne si elle n'existe pas déjà dans vizData\r\n      var posLigne = vizData.findIndex(e => e.ligne === csvData[i].ligne)\r\n      if (posLigne === -1) {\r\n        vizData.push({ ligne: csvData[i].ligne, girouettes: [] })\r\n        posLigne = vizData.length - 1\r\n      }\r\n\r\n      // On ajoute la girouette si elle n'existe pas déjà dans vizData\r\n      var posGirouette = vizData[posLigne].girouettes.findIndex(e => e.girouette === csvData[i].Girouette)\r\n      if (posGirouette === -1) {\r\n        vizData[posLigne].girouettes.push({ girouette: csvData[i].Girouette, voyages: [] })\r\n        posGirouette = vizData[posLigne].girouettes.length - 1\r\n      }\r\n\r\n      // On ajoute le voyage s'il n'existe pas déjà dans vizData\r\n      var posVoyage = vizData[posLigne].girouettes[posGirouette].voyages.findIndex(e => e.voyage === csvData[i].voyage)\r\n      if (posVoyage === -1) {\r\n        vizData[posLigne].girouettes[posGirouette].voyages.push({ voyage: csvData[i].voyage, arrets: [] })\r\n        posVoyage = vizData[posLigne].girouettes[posGirouette].voyages.length - 1\r\n      }\r\n\r\n      // On ajoute l'arrêt s'il n'existe pas déjà dans vizData\r\n      var posArret = vizData[posLigne].girouettes[posGirouette].voyages[posVoyage].arrets.findIndex(e => e.codeArret === csvData[i].arret_code)\r\n      if (posArret === -1) {\r\n        vizData[posLigne].girouettes[posGirouette].voyages[posVoyage].arrets.push(\r\n          {\r\n            codeArret: csvData[i].arret_code,\r\n            nomArret: csvData[i].arret_nom,\r\n            sequenceArret : csvData[i].sequence_arret,\r\n            minutesEcart: [],\r\n            moyMinutesEcart: null,\r\n            nClients: [],\r\n            moyNClients: null,\r\n            ponctualite: [],\r\n            tauxPonctualite: null,\r\n            minutesEcartClient: [],\r\n            moyMinutesEcartClient: null\r\n          })\r\n        posArret = vizData[posLigne].girouettes[posGirouette].voyages[posVoyage].arrets.length - 1\r\n      }\r\n\r\n      vizData[posLigne].girouettes[posGirouette].voyages[posVoyage].arrets[posArret].minutesEcart.push(csvData[i].Minutes_ecart_planifie)\r\n      vizData[posLigne].girouettes[posGirouette].voyages[posVoyage].arrets[posArret].nClients.push(csvData[i].montants)\r\n      vizData[posLigne].girouettes[posGirouette].voyages[posVoyage].arrets[posArret].ponctualite.push(csvData[i].Etat_Ponctualite)\r\n      vizData[posLigne].girouettes[posGirouette].voyages[posVoyage].arrets[posArret].minutesEcartClient.push(csvData[i].Minutes_ecart_planifie * csvData[i].montants)\r\n    }\r\n  }\r\n\r\n  // Fonctions pour créer les indicateurs\r\n  const average = arr => +(arr.reduce((a, b) => a + b, 0) / arr.length).toFixed(2) // https://poopcode.com/calculate-the-average-of-an-array-of-numbers-in-javascript/\r\n  const computeTauxPonctualite = arr => arr.filter(x => x === 'Ponctuel').length / arr.length\r\n\r\n  // Parcours de vizData pour calculer les indicateurs pour chaque ligne.arret\r\n  vizData.forEach(function (ligne) {\r\n    ligne.girouettes.forEach(function (girouette) {\r\n      girouette.voyages.forEach(function (voyage) {\r\n        voyage.arrets.forEach(function (arret) {\r\n          arret.moyMinutesEcart = average(arret.minutesEcart)\r\n          arret.moyNClients = average(arret.nClients)\r\n          arret.moyMinutesEcartClient = average(arret.minutesEcartClient)\r\n          arret.tauxPonctualite = computeTauxPonctualite(arret.ponctualite)\r\n        })\r\n      })\r\n    })\r\n  })\r\n}\r\n","import * as helper from './helper.js'\r\n\r\nconst MARGIN = { top: 52, right: 100, bottom: 125, left: 100 }\r\nconst FONT_SIZE = 14\r\nconst DIRECTIONS_ANGLE = -45\r\nconst QUANTILE_STROKE_COLOR = 'black'\r\nconst QUANTILE_FILL_COLOR = 'lightgray'\r\nconst QUANTILE_STROKE_WIDTH = 2\r\nconst NUMBER_OF_TICKS = 10\r\nconst GRADIENT_COLORS = ['#ff9999', '#99ff99', '#ffff99']\r\nconst GRADIENT_THRESHOLDS = ['10', '5', '0', '-5']\r\n\r\n/**\r\n * @param vizData\r\n */\r\nexport function generateViz3 (vizData) {\r\n  // Split container in two\r\n  var container = d3.select('#grouped-quantile-graph-container')\r\n  var delayGraphContainer = container.append('div')\r\n    .style('width', '50%')\r\n    .style('height', '100%')\r\n    .style('float', 'left')\r\n  var trafficGraphContainer = container.append('div')\r\n    .style('width', '50%')\r\n    .style('height', '100%')\r\n    .style('float', 'right')\r\n\r\n  // TODO: Fetch data\r\n  var data = {}\r\n  data.lines = ['9', '22']\r\n  data.directions = ['Lafontaine', 'Montmorency', 'Côté', 'George VI']\r\n\r\n  // Regenerate graphs on resize\r\n  new ResizeObserver(() => { generateDelayGraph(delayGraphContainer, data, vizData) })\r\n    .observe(delayGraphContainer.node())\r\n  new ResizeObserver(() => { generateTrafficGraph(trafficGraphContainer, data, vizData) })\r\n    .observe(trafficGraphContainer.node())\r\n}\r\n\r\n/**\r\n * @param {Selection} container The div to generate the graph in\r\n * @param {object} data The data to fetch\r\n * @param vizData\r\n */\r\nexport function generateDelayGraph (container, data, vizData) {\r\n  // Fetch data\r\n  data.quantileSets = getDelayQuantileSets(vizData)\r\n\r\n  // Generate common graph\r\n  data.title = 'Retard Moyen'\r\n  var [svg, dataScale] = generateGroupedQuantileGraph(container, data)\r\n  var HEIGHT = container.node().getBoundingClientRect().height\r\n  var WIDTH = Math.min(HEIGHT, container.node().getBoundingClientRect().width)\r\n\r\n  // Set gradients\r\n  svg.append('defs')\r\n    .append('linearGradient')\r\n    .attr('id', 'late-grad')\r\n    .attr('x1', '0%')\r\n    .attr('x2', '0%')\r\n    .attr('y1', '0%')\r\n    .attr('y2', '100%')\r\n    .selectAll('stop')\r\n    .data([GRADIENT_COLORS[0], GRADIENT_COLORS[1]])\r\n    .enter()\r\n    .append('stop')\r\n    .style('stop-color', function (d) { return d })\r\n    .attr('offset', function (d, i) { return 100 * i + '%' })\r\n  svg.append('defs')\r\n    .append('linearGradient')\r\n    .attr('id', 'early-grad')\r\n    .attr('x1', '0%')\r\n    .attr('x2', '0%')\r\n    .attr('y1', '0%')\r\n    .attr('y2', '100%')\r\n    .selectAll('stop')\r\n    .data([GRADIENT_COLORS[1], GRADIENT_COLORS[2]])\r\n    .enter()\r\n    .append('stop')\r\n    .style('stop-color', function (d) { return d })\r\n    .attr('offset', function (d, i) { return 100 * i + '%' })\r\n  // Draw gradients\r\n  svg.insert('rect', '#x-axis')\r\n    .attr('width', WIDTH - MARGIN.left - MARGIN.right)\r\n    .attr('x', MARGIN.left)\r\n    .attr('height', dataScale(GRADIENT_THRESHOLDS[0]) - MARGIN.top)\r\n    .attr('y', MARGIN.top)\r\n    .attr('fill', GRADIENT_COLORS[0])\r\n  svg.insert('rect', '#x-axis')\r\n    .attr('width', WIDTH - MARGIN.left - MARGIN.right)\r\n    .attr('x', MARGIN.left)\r\n    .attr('height', dataScale(GRADIENT_THRESHOLDS[1]) - dataScale(GRADIENT_THRESHOLDS[0]))\r\n    .attr('y', dataScale(GRADIENT_THRESHOLDS[0]))\r\n    .attr('fill', 'url(#late-grad)')\r\n  svg.insert('rect', '#x-axis')\r\n    .attr('width', WIDTH - MARGIN.left - MARGIN.right)\r\n    .attr('x', MARGIN.left)\r\n    .attr('height', dataScale(GRADIENT_THRESHOLDS[2]) - dataScale(GRADIENT_THRESHOLDS[1]))\r\n    .attr('y', dataScale(GRADIENT_THRESHOLDS[1]))\r\n    .attr('fill', GRADIENT_COLORS[1])\r\n  svg.insert('rect', '#x-axis')\r\n    .attr('width', WIDTH - MARGIN.left - MARGIN.right)\r\n    .attr('x', MARGIN.left)\r\n    .attr('height', dataScale(GRADIENT_THRESHOLDS[3]) - dataScale(GRADIENT_THRESHOLDS[2]))\r\n    .attr('y', dataScale(GRADIENT_THRESHOLDS[2]))\r\n    .attr('fill', 'url(#early-grad)')\r\n  svg.insert('rect', '#x-axis')\r\n    .attr('width', WIDTH - MARGIN.left - MARGIN.right)\r\n    .attr('x', MARGIN.left)\r\n    .attr('height', HEIGHT - MARGIN.bottom - dataScale(GRADIENT_THRESHOLDS[3]))\r\n    .attr('y', dataScale(GRADIENT_THRESHOLDS[3]))\r\n    .attr('fill', GRADIENT_COLORS[2])\r\n\r\n  // Set y axis label\r\n  svg.select('#y-axis > .label')\r\n    .text('Minute')\r\n    .attr('fill', '#898989')\r\n\r\n  // Legend\r\n  const legend = svg.insert('g', '#x-axis')\r\n  const middleY = (HEIGHT - MARGIN.top - MARGIN.bottom) / 2 + MARGIN.top\r\n  const squareWidth = FONT_SIZE * 2 / 3\r\n  const paddingX = FONT_SIZE * 2\r\n  const paddingY = FONT_SIZE * 1.5\r\n  legend.append('rect')\r\n    .attr('width', squareWidth)\r\n    .attr('x', WIDTH - MARGIN.right + FONT_SIZE)\r\n    .attr('height', squareWidth)\r\n    .attr('y', middleY - paddingY)\r\n    .attr('stroke', QUANTILE_STROKE_COLOR)\r\n    .attr('fill', GRADIENT_COLORS[0])\r\n  legend.append('text')\r\n    .attr('x', WIDTH - MARGIN.right + paddingX)\r\n    .attr('y', middleY - paddingY + squareWidth)\r\n    .text('Retard')\r\n  legend.append('rect')\r\n    .attr('width', squareWidth)\r\n    .attr('x', WIDTH - MARGIN.right + FONT_SIZE)\r\n    .attr('height', squareWidth)\r\n    .attr('y', middleY)\r\n    .attr('stroke', QUANTILE_STROKE_COLOR)\r\n    .attr('fill', GRADIENT_COLORS[1])\r\n  legend.append('text')\r\n    .attr('x', WIDTH - MARGIN.right + paddingX)\r\n    .attr('y', middleY + squareWidth)\r\n    .text('Ponctuel')\r\n  legend.append('rect')\r\n    .attr('width', squareWidth)\r\n    .attr('x', WIDTH - MARGIN.right + FONT_SIZE)\r\n    .attr('height', squareWidth)\r\n    .attr('y', middleY + paddingY)\r\n    .attr('stroke', QUANTILE_STROKE_COLOR)\r\n    .attr('fill', GRADIENT_COLORS[2])\r\n  legend.append('text')\r\n    .attr('x', WIDTH - MARGIN.right + paddingX)\r\n    .attr('y', middleY + paddingY + squareWidth)\r\n    .text('Avance')\r\n}\r\n\r\n/**\r\n * @param {Selection} container The div to generate the graph in\r\n * @param {object} data The data to fetch\r\n * @param vizData\r\n */\r\nexport function generateTrafficGraph (container, data, vizData) {\r\n  // Fetch data\r\n  data.quantileSets = getTrafficQuantileSets(vizData, 'moyMinutesEcart')\r\n\r\n  // Generate common graph\r\n  data.title = 'Achalandage Moyen'\r\n  var [svg] = generateGroupedQuantileGraph(container, data)\r\n  // Set y axis label\r\n  svg.select('#y-axis > .label')\r\n    .text(\"\")\r\n  svg.select('#y-axis > .label')\r\n    .append('tspan')\r\n    .attr(\"x\",\"88\")\r\n    .attr(\"y\",\"21\")\r\n    .text(\"Nombre\")\r\n  svg.select('#y-axis > .label')\r\n    .append('tspan')\r\n    .attr(\"dx\",\"-51\")\r\n    .attr(\"dy\",\"15\")\r\n    .text(\"de personnes\")\r\n    svg.select('#y-axis > .label')\r\n    .append('tspan')\r\n    .attr(\"dx\",\"-84\")\r\n    .attr(\"dy\",\"14\")\r\n    .text(\"par trajet\")\r\n    /*.text('Nombre de personnes par trajet')\r\n    .attr('fill', '#898989')*/\r\n}\r\n\r\n/**\r\n * @param {Selection} container The div to generate the graph in\r\n * @param {object} data The data to display\r\n * @returns {Selection} The generated graph as svg\r\n */\r\nexport function generateGroupedQuantileGraph (container, data) {\r\n  // ===================== SETUP =====================\r\n\r\n  // Delete existing content\r\n  container.html('')\r\n  // Set size\r\n  var HEIGHT = container.node().getBoundingClientRect().height\r\n  var WIDTH = Math.min(HEIGHT, container.node().getBoundingClientRect().width)\r\n  var BAR_WIDTH = (WIDTH - MARGIN.left - MARGIN.right) / 7\r\n  // Create svg\r\n  var svg = container.append('svg')\r\n    .attr('width', WIDTH)\r\n    .attr('height', HEIGHT)\r\n    .attr('style', 'display: block; margin: auto')\r\n\r\n  // ===================== SCALES =====================\r\n\r\n  // Create lines scale\r\n  var linesScale = d3.scaleOrdinal()\r\n    .domain(data.lines)\r\n    .range([MARGIN.left + 2 * BAR_WIDTH, MARGIN.left + 5 * BAR_WIDTH])\r\n  // Create directions scale\r\n  var directionsRange = []\r\n  for (const line of data.lines) {\r\n    directionsRange.push(linesScale(line) - BAR_WIDTH / 2)\r\n    directionsRange.push(linesScale(line) + BAR_WIDTH / 2)\r\n  }\r\n  var directionsScale = d3.scaleOrdinal()\r\n    .domain([...data.directions])\r\n    .range(directionsRange)\r\n  // Create data scale\r\n  var maxValue = Number.MIN_SAFE_INTEGER\r\n  var minValue = Number.MAX_SAFE_INTEGER\r\n  for (const quantiles of data.quantileSets) {\r\n    for (const quantile of quantiles) {\r\n      if (maxValue < quantile) {\r\n        maxValue = quantile\r\n      }\r\n      if (minValue > quantile) {\r\n        minValue = quantile\r\n      }\r\n    }\r\n  }\r\n  var dataScale = d3.scaleLinear()\r\n    .domain([minValue, maxValue])\r\n    .range([HEIGHT - MARGIN.bottom - FONT_SIZE / 2, MARGIN.top + FONT_SIZE / 2])\r\n\r\n  // ===================== X AXIS =====================\r\n\r\n  var xAxis = svg.append('g')\r\n    .attr('id', 'x-axis')\r\n  // Draw axis line\r\n  xAxis.append('path')\r\n    .attr('d', d3.line()([\r\n      [MARGIN.left, HEIGHT - MARGIN.bottom],\r\n      [MARGIN.left + 7 * BAR_WIDTH, HEIGHT - MARGIN.bottom]\r\n    ]))\r\n    .attr('stroke', 'black')\r\n  // Draw line values\r\n  const lineValuesY = HEIGHT - MARGIN.bottom + FONT_SIZE * 1.5\r\n  for (const line of data.lines) {\r\n    xAxis.append('text')\r\n      .attr('x', linesScale(line))\r\n      .attr('y', lineValuesY)\r\n      .attr('text-anchor', 'middle')\r\n      .text(line)\r\n    .attr('fill', '#898989')\r\n      .style('font-size', FONT_SIZE)\r\n  }\r\n  // Draw direction values\r\n  const directionValuesY = lineValuesY + FONT_SIZE\r\n  for (let i = 0; i < data.directions.length; i++) {\r\n    const x = directionsScale(data.directions[i])\r\n    xAxis.append('text')\r\n      .attr('text-anchor', 'end')\r\n      .attr('transform', `translate(${x}, ${directionValuesY}) rotate(${DIRECTIONS_ANGLE})`)\r\n      .text(data.directions[i])\r\n      .style('font-size', FONT_SIZE)\r\n      .attr('font-family', 'sans-serif')\r\n      .attr('class', `direction${i} label`)\r\n  }\r\n  // Draw labels\r\n  xAxis.append('text')\r\n    .attr('x', WIDTH - MARGIN.right + FONT_SIZE / 2)\r\n    .attr('y', lineValuesY)\r\n    .text('Ligne')\r\n    .attr('fill', '#898989')\r\n    .style('font-size', FONT_SIZE)\r\n  xAxis.append('text')\r\n    .attr('x', WIDTH - MARGIN.right + FONT_SIZE / 2)\r\n    .attr('y', directionValuesY + FONT_SIZE)\r\n    .text('Direction')\r\n    .attr('fill', '#898989')\r\n    .style('font-size', FONT_SIZE)\r\n\r\n  // ===================== Y AXIS =====================\r\n\r\n  var yAxis = svg.append('g')\r\n    .attr('id', 'y-axis')\r\n  // Draw axis line\r\n  yAxis.append('path')\r\n    .attr('d', d3.line()([\r\n      [MARGIN.left, MARGIN.top],\r\n      [MARGIN.left, HEIGHT - MARGIN.bottom]\r\n    ]))\r\n    .attr('stroke', 'black')\r\n  // Generate steps\r\n  var steps = helper.getSteps(NUMBER_OF_TICKS, dataScale.domain())\r\n  for (const step of steps) {\r\n    const y = dataScale(step)\r\n    // Draw data values\r\n    yAxis.append('text')\r\n      .attr('text-anchor', 'end')\r\n      .attr('x', MARGIN.left - FONT_SIZE)\r\n      .attr('y', y + FONT_SIZE / 3)\r\n      .text(step)\r\n      .attr('font-family', 'sans-serif')\r\n      .style('font-size', FONT_SIZE)\r\n    // Draw ticks\r\n    yAxis.append('path')\r\n      .attr('d', d3.line()([\r\n        [MARGIN.left - FONT_SIZE / 2, y],\r\n        [MARGIN.left, y]]\r\n      ))\r\n      .attr('stroke', QUANTILE_STROKE_COLOR)\r\n      .attr('stroke-width', QUANTILE_STROKE_WIDTH)\r\n  }\r\n  // Draw labels\r\n  yAxis.append('text')\r\n    .attr('x', MARGIN.left - FONT_SIZE / 2)\r\n    .attr('y', MARGIN.top - FONT_SIZE / 2)\r\n    .attr('class', 'label')\r\n    .attr('text-anchor', 'end')\r\n    .text('Unité de données')\r\n    .attr('fill', '#898989')\r\n    .style('font-size', FONT_SIZE)\r\n\r\n  // ===================== CANDLES =====================\r\n\r\n  var bars = svg.append('g')\r\n    .attr('id', 'candles')\r\n\r\n  // HISTOGRAMME\r\n\r\n  /* for (let i = 0; i < data.quantileSets.length; i++) {\r\n    // Features of the histogram\r\n    var histogram = d3.histogram()\r\n      .domain(dataScale.domain())\r\n      .thresholds(dataScale.ticks(50)) // Important: how many bins approx are going to be made? It is the 'resolution' of the violin plot\r\n      .value(d => d)\r\n    const bins = histogram(data.quantileSets[i])\r\n    // What is the biggest number of value in a bin? We need it cause this value will have a width of 100% of the bandwidth.\r\n    var maxNum = 0\r\n    for (const bin of bins) {\r\n      if (bin.length > maxNum) {\r\n        maxNum = bin.length\r\n      }\r\n    }\r\n    // The maximum width of a violin must be x.bandwidth = the width dedicated to a group\r\n    var xNum = d3.scaleLinear()\r\n      .range([0, BAR_WIDTH])\r\n      .domain([-maxNum, maxNum])\r\n    // Add the shape to this svg!\r\n    const areaGenerator = d3.area()\r\n      .x0((d) => xNum(-d.length))\r\n      .x1((d) => xNum(d.length))\r\n      .y((d) => dataScale(d.x0))\r\n      .curve(d3.curveStep)\r\n    bars.append('path')\r\n      .attr('transform', `translate(${directionsScale(data.directions[i]) - BAR_WIDTH / 2})`)\r\n      .style('fill', '#69b3a2')\r\n      .attr('d', areaGenerator(bins))\r\n  } */\r\n\r\n  for (let i = 0; i < data.quantileSets.length; i++) {\r\n    const x = directionsScale(data.directions[i])\r\n    const top = dataScale(data.quantileSets[i][4])\r\n    const q3 = dataScale(data.quantileSets[i][3])\r\n    const q2 = dataScale(data.quantileSets[i][2])\r\n    const q1 = dataScale(data.quantileSets[i][1])\r\n    const bottom = dataScale(data.quantileSets[i][0])\r\n    // Draw domain line\r\n    bars.append('path')\r\n      .attr('d', d3.line()([[x, top], [x, bottom]]))\r\n      .attr('stroke', QUANTILE_STROKE_COLOR)\r\n      .attr('stroke-width', QUANTILE_STROKE_WIDTH)\r\n      .attr('class', `direction${i}`)\r\n    // Draw Q1 to Q3 bar\r\n    bars.append('rect')\r\n      .attr('width', BAR_WIDTH)\r\n      .attr('x', x - BAR_WIDTH / 2)\r\n      .attr('height', q1 - q3)\r\n      .attr('y', q3)\r\n      .attr('fill', QUANTILE_FILL_COLOR)\r\n      .attr('stroke', QUANTILE_STROKE_COLOR)\r\n      .attr('stroke-width', QUANTILE_STROKE_WIDTH)\r\n      .attr('class', `direction${i}`)\r\n    // Draw Q2 line\r\n    bars.append('path')\r\n      .attr('d', d3.line()([[x - BAR_WIDTH / 2, q2], [x + BAR_WIDTH / 2, q2]]))\r\n      .attr('stroke', QUANTILE_STROKE_COLOR)\r\n      .attr('stroke-width', QUANTILE_STROKE_WIDTH)\r\n      .attr('class', `direction${i}`)\r\n    // Draw quantile values\r\n    for (let j = 0; j < data.quantileSets[i].length; j++) {\r\n      const quantile = bars.append('g')\r\n        .attr('class', `direction${i} quantile`)\r\n        .style('visibility', 'hidden')\r\n      const x = directionsScale(data.directions[i]) + (i % 2 === 0 ? -1 : 1) * (BAR_WIDTH / 2 + FONT_SIZE / 2)\r\n      const y = dataScale(data.quantileSets[i][j])\r\n      quantile.append('text')\r\n        .attr('x', x)\r\n        .attr('y', y)\r\n        .attr('text-anchor', (i % 2 === 0 ? 'end' : 'start'))\r\n        .text(Math.round(data.quantileSets[i][j]))\r\n        .style('font-size', FONT_SIZE)\r\n        .attr('id', `quantile-text-${i}-${j}`)\r\n    }\r\n  }\r\n\r\n  // ===================== HOVER =====================\r\n\r\n  // Create triggers\r\n  for (let i = 0; i < data.directions.length; i++) {\r\n    bars.append('rect')\r\n      .attr('width', BAR_WIDTH)\r\n      .attr('x', directionsScale(data.directions[i]) - BAR_WIDTH / 2)\r\n      .attr('height', dataScale.range()[0] - dataScale.range()[1] + FONT_SIZE)\r\n      .attr('y', MARGIN.top)\r\n      .attr('fill', 'transparent')\r\n      // Highlight direction\r\n      .on('mouseover', () => {\r\n        d3.selectAll(`.direction${i}`)\r\n          .attr('stroke-width', QUANTILE_STROKE_WIDTH * 2)\r\n        d3.selectAll(`.direction${i}.label`)\r\n          .style('font-size', FONT_SIZE * 1.2)\r\n        d3.selectAll(`.direction${i}.quantile`)\r\n          .style('visibility', 'visible')\r\n      // Unhighlight direction\r\n      }).on('mouseout', () => {\r\n        d3.selectAll(`.direction${i}`)\r\n          .attr('stroke-width', QUANTILE_STROKE_WIDTH)\r\n        d3.selectAll(`.direction${i}.label`)\r\n          .style('font-size', FONT_SIZE)\r\n        d3.selectAll(`.direction${i}.quantile`)\r\n          .style('visibility', 'hidden')\r\n      })\r\n  }\r\n\r\n  // ===================== OTHER =====================\r\n\r\n  // Draw Title\r\n  svg.append('text')\r\n    .attr('x', (WIDTH - MARGIN.right - MARGIN.left) / 2 + MARGIN.left)\r\n    .attr('y', MARGIN.top - FONT_SIZE * 2)\r\n    .attr('text-anchor', 'middle')\r\n    .text(data.title)\r\n    .style('font-size', FONT_SIZE)\r\n\r\n  return [svg, dataScale]\r\n}\r\n\r\n/**\r\n * @param {object} vizData Project data\r\n * @returns {Array<number>} The quantile sets\r\n */\r\nexport function getDelayQuantileSets (vizData) {\r\n  const quantileSets = []\r\n  for (const line of vizData) {\r\n    for (const direction of line.girouettes) {\r\n      const delays = []\r\n      for (const trip of direction.voyages) {\r\n        for (const stop of trip.arrets) {\r\n          delays.push(stop.moyMinutesEcart)\r\n        }\r\n      }\r\n      quantileSets.push(helper.getQuantiles(delays))\r\n    }\r\n  }\r\n  return quantileSets\r\n}\r\n\r\n/**\r\n * @param {object} vizData Project data\r\n * @returns {Array<number>} The quantile sets\r\n */\r\nexport function getTrafficQuantileSets (vizData) {\r\n  const quantileSets = []\r\n  for (const line of vizData) {\r\n    for (const direction of line.girouettes) {\r\n      const tripNClients = []\r\n      for (const trip of direction.voyages) {\r\n        let nClients = 0\r\n        for (const stop of trip.arrets) {\r\n          nClients += stop.moyNClients\r\n        }\r\n        tripNClients.push(nClients)\r\n      }\r\n      quantileSets.push(helper.getQuantiles(tripNClients))\r\n    }\r\n  }\r\n  return quantileSets\r\n}\r\n","'use strict'\r\n\r\nimport * as helper from './scripts/helper.js'\r\nimport * as preprocess from './scripts/preprocess.js'\r\nimport * as groupedQuantile from './scripts/grouped-quantile.js'\r\n\r\n/**\r\n * @file \r\n * @author Adam Prévost, Armelle Jézéquel, Clara Serruau, Jules Lefebvre, Julien Dupuis\r\n * @version 1.0.0\r\n * \r\n * La structure du projet est inspirée de celle employé pour les TPs de INF8808 créée par Olivia Gélinas.\r\n */\r\n\r\n(function (d3) {\r\n  const svgSize = {\r\n    width: 800,\r\n    height: 625\r\n  }\r\n\r\n  helper.setCanvasSize(svgSize.width, svgSize.height)\r\n  helper.generateMapG(svgSize.width, svgSize.height)\r\n  helper.generateMarkerG(svgSize.width, svgSize.height)\r\n  helper.appendGraphLabels(d3.select('.main-svg'))\r\n  helper.initPanelDiv()\r\n\r\n  // Solution temporaire, éventuellement l'utilisateur peut choisir la période qui l'intéresse, s'il veut inclure les week-end et les fériés.\r\n  const startDate = new Date('2021-09-01')\r\n  const endDate = new Date('2021-12-01')\r\n  const typeJour = 'semaine'\r\n  const ferie = false\r\n\r\n  var vizData = []\r\n\r\n  build()\r\n\r\n  /**\r\n   *   Cette fonction construit la page web\r\n   */\r\n  function build () {\r\n    d3.csv('./donnees_L9_L22.csv').then(function (csvData) {\r\n      // Change les string pour les types appropriés\r\n      csvData.forEach(function (d) {\r\n        d.date = new Date(d.date + ' 00:00:00')\r\n        d.ligne = +d.ligne\r\n        d.voyage = +d.voyage\r\n        d.arret_code = +d.arret_code\r\n        d.montants = +d.montants\r\n        d.Minutes_ecart_planifie = +d.Minutes_ecart_planifie\r\n        d.sequence_arret = +d.sequence_arret\r\n        d.arret_Latitude = +d.arret_Latitude\r\n        d.arret_Longitude = +d.arret_Longitude\r\n      })\r\n      //console.log(csvData)\r\n      preprocess.addDayType(csvData)\r\n      preprocess.aggregateData(csvData, vizData, startDate, endDate, typeJour, ferie)\r\n      \r\n      groupedQuantile.generateViz3(vizData);\r\n    })\r\n  }\r\n})(d3)\r\n"]}